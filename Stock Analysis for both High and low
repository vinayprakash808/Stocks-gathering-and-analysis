# Difference between previous day close and next day high
#remove.packages("dplyr")
#install.packages("quantmod")
#install.packages("cowplot")
#install.packages("plotly")
library(plotly)
library(quantmod)
require(quantmod)
library(gdata)
library(magrittr)
library(ggplot2)
#install.packages("gridExtra")
library(cowplot)
library("gridExtra")
library(shiny)
ui <- fluidPage(
  tabsetPanel(tabPanel("Tab1",sidebarLayout(
    sidebarPanel(column(h6(actionButton("goButton10", "Execute", width = 280 )),width = 10,offset = 0),
                 column(h6(selectInput("plots","Plots",choices = c("Null","plots"))),width = 10,offset = 0),
                 h6(plotOutput("message3",width = 350,height = 1500))),
    mainPanel(h5(textOutput("Name")),
              h6("The data considered is from 2018 to till date"),
              h6(dataTableOutput(("message5"))),
              h6(plotOutput("message2")))
  )),
  tabPanel("Correlation",sidebarLayout(
    sidebarPanel(h6(plotOutput("message7",width = 1000,height = 1500)),width = 1000),
    mainPanel(h6(textOutput("Name1")),
              h6("The data considered is from 2018 to till date")))),
  tabPanel("Range between predicted high and actual high",sidebarLayout(
    sidebarPanel(h6(plotOutput("message8",width = 1000,height = 1500)),width = 1000),
    mainPanel(h6(textOutput("Name3")),
              h6("The data 
                 considered is from 2018 to till date")))),
  tabPanel("Positive_Negaive_Response for high prices",sidebarLayout(
    sidebarPanel(h6(plotOutput("message9",width = 10000,height = 1500)),width = 1000),
    mainPanel("Hi"))),
  tabPanel("Predict High prices",sidebarLayout(
    sidebarPanel(h6(plotOutput("message10",width = 280,height = 20)),width = 280),
    mainPanel(fluidRow(column(h6(numericInput("Number1","plow",min = -10, max = 1000, value = 0)),width = 5,offset = 0),
                       br(),
                       column(h6(actionButton("goButton8", "predict_high_based_on_plow")),width = 5,offset = 0),
                       br(),
                       column(em(verbatimTextOutput("ntext1")),width = 10,offset = 0)),
              fluidRow(column(h6(numericInput("Number2","popen",min = -10, max = 1000, value = 0)),width = 5,offset = 0),
             br(),
             column(h6(actionButton("goButton9", "predict_high_based_on_popen")),width = 5,offset = 0),
             br(),
             column(em(verbatimTextOutput("ntext2")),width = 10,offset = 0)),
             fluidRow(column(h6(numericInput("Number3","pclose",min = -10, max = 1000, value = 0)),width = 5,offset = 0),
                      br(),
                      column(h6(actionButton("goButton20", "predict_high_based_on_pclose")),width = 5,offset = 0),
                      br(),
                      column(em(verbatimTextOutput("ntext20")),width = 10,offset = 0)),
             fluidRow(column(h6(numericInput("Number4","phigh",min = -10, max = 1000, value = 0)),width = 5,offset = 0),
                      br(),
                      column(h6(actionButton("goButton11", "predict_high_based_on_phigh")),width = 5,offset = 0),
                      br(),
                      column(em(verbatimTextOutput("ntext4")),width = 10,offset = 0))))),
  tabPanel("Tab2",sidebarLayout(
    sidebarPanel(h6(plotlyOutput("message100",width = 1000,height = 1000)),width = 1000),
    mainPanel("Hi"))),
  tabPanel("Range between predicted low and actual low",sidebarLayout(
    sidebarPanel(h6(plotOutput("message300",width = 1000,height = 1500)),width = 1000),
    mainPanel(h6(textOutput("Name300")),
              h6("The data 
                 considered is from 2018 to till date")))),
  tabPanel("Positive_Negaive_Response for low prices",sidebarLayout(
    sidebarPanel(h6(plotOutput("message250",width = 10000,height = 1500)),width = 1000),
    mainPanel("Hi"))),
  tabPanel("Predict low prices",sidebarLayout(
    sidebarPanel(h6(plotOutput("message600",width = 280,height = 20)),width = 280),
    mainPanel(fluidRow(column(h6(numericInput("Number41","plow",min = -10, max = 1000, value = 0)),width = 5,offset = 0),
                       br(),
                       column(h6(actionButton("goButton41", "predict_low_based_on_plow")),width = 5,offset = 0),
                       br(),
                       column(em(verbatimTextOutput("ntext41")),width = 10,offset = 0)),
              fluidRow(column(h6(numericInput("Number42","popen",min = -10, max = 1000, value = 0)),width = 5,offset = 0),
                       br(),
                       column(h6(actionButton("goButton42", "predict_low_based_on_popen")),width = 5,offset = 0),
                       br(),
                       column(em(verbatimTextOutput("ntext42")),width = 10,offset = 0)),
              fluidRow(column(h6(numericInput("Number43","pclose",min = -10, max = 1000, value = 0)),width = 5,offset = 0),
                       br(),
                       column(h6(actionButton("goButton43", "predict_low_based_on_pclose")),width = 5,offset = 0),
                       br(),
                       column(em(verbatimTextOutput("ntext43")),width = 10,offset = 0)),
              fluidRow(column(h6(numericInput("Number44","phigh",min = -10, max = 1000, value = 0)),width = 5,offset = 0),
                       br(),
                       column(h6(actionButton("goButton44", "predict_low_based_on_phigh")),width = 5,offset = 0),
                       br(),
                       column(em(verbatimTextOutput("ntext44")),width = 10,offset = 0)))))
  ))
server <- function(input, output, session) {
  message5 <- eventReactive(
    input$goButton10,{
      df1 <- as.data.frame(getSymbols("SADBHIN.NS", src = "yahoo", from = "2018-01-01", to = Sys.Date(),verbose = F, auto.assign = T))
      allstocks <- fortify.zoo(SADBHIN.NS)
      allstocks$company <- sub("\\..*", "", (colnames(allstocks)[c(2,1)][1]))
      newcol <- c("Date","open","high","low","close","volume","adjusted","Company")
      colnames(allstocks) <- newcol
      allstocks$day <- weekdays(allstocks$Date)
      allstocks$month <- months(allstocks$Date)
      allstocks$MaxProfit <- round(allstocks$high - allstocks$low,digits = 1)
      allstocks$pclose_chigh1 <- round(c(NA, allstocks$close[-nrow(allstocks)]) - allstocks$high,digits = 1)*(-1)
      allstocks$pclose_chigh1 <- as.numeric(as.character(allstocks$pclose_chigh1))
      allstocks$pclose <- round(c(NA, allstocks$close[-nrow(allstocks)]),digits = 1)
      allstocks$pclose <- as.numeric(as.character(allstocks$pclose))
      allstocks$popen <- round(c(NA, allstocks$open[-nrow(allstocks)]),digits = 1)
      allstocks$popen <- as.numeric(as.character(allstocks$popen))
      allstocks$phigh <- round(c(NA, allstocks$high[-nrow(allstocks)]),digits = 1)
      allstocks$phigh <- as.numeric(as.character(allstocks$phigh))
      allstocks$plow <- round(c(NA, allstocks$low[-nrow(allstocks)]),digits = 1)
      allstocks$plow <- as.numeric(as.character(allstocks$plow))
      allstocks$copen_cclose <- round(allstocks$close-allstocks$open,digits = 1)
      high_based_on_pclose <- lm(high~pclose, data=allstocks)
      allstocks$predict_high_based_on_pclose <- c(NA,predict(high_based_on_pclose))
      allstocks$predict_high_based_on_pclose_minus_actual_high <- allstocks$predict_high_based_on_pclose - allstocks$high 
      high_based_on_popen <- lm(high~popen, data=allstocks)
      allstocks$predict_high_based_on_popen <- c(NA,predict(high_based_on_popen))
      allstocks$predict_high_based_on_popen_minus_actual_high <- allstocks$predict_high_based_on_popen - allstocks$high
      high_based_on_phigh <- lm(high~phigh, data=allstocks)
      allstocks$predict_high_based_on_phigh <- c(NA,predict(high_based_on_phigh))
      allstocks$predict_high_based_on_phigh_minus_actual_high <- allstocks$predict_high_based_on_phigh - allstocks$high
      high_based_on_plow <- lm(high~plow, data=allstocks)
      allstocks$predict_high_based_on_plow <- c(NA,predict(high_based_on_plow))
      allstocks$predict_high_based_on_plow_minus_actual_high <- allstocks$predict_high_based_on_plow - allstocks$high
      low_based_on_pclose <- lm(low~pclose, data=allstocks)
      allstocks$predict_low_based_on_pclose <- c(NA,predict(low_based_on_pclose))
      allstocks$predict_low_based_on_pclose_minus_actual_low <- allstocks$predict_low_based_on_pclose - allstocks$low
      low_based_on_popen <- lm(low~popen, data=allstocks)
      allstocks$predict_low_based_on_popen <- c(NA,predict(low_based_on_popen))
      allstocks$predict_low_based_on_popen_minus_actual_low <- allstocks$predict_low_based_on_popen - allstocks$low
      low_based_on_phigh <- lm(low~phigh, data=allstocks)
      allstocks$predict_low_based_on_phigh <- c(NA,predict(low_based_on_phigh))
      allstocks$predict_low_based_on_phigh_minus_actual_low <- allstocks$predict_low_based_on_phigh - allstocks$low
      low_based_on_plow <- lm(low~plow, data=allstocks)
      allstocks$predict_low_based_on_plow <- c(NA,predict(low_based_on_plow))
      allstocks$predict_low_based_on_plow_minus_actual_low <- allstocks$predict_low_based_on_plow - allstocks$low
      allstocks1 <- allstocks[-1,]
      allstocks$bin_predict_high_based_on_pclose_minus_actual_high <- cut(allstocks$predict_high_based_on_pclose_minus_actual_high,20)
      allstocks$bin_predict_high_based_on_popen_minus_actual_high <- cut(allstocks$predict_high_based_on_popen_minus_actual_high,20)
      allstocks$bin_predict_high_based_on_phigh_minus_actual_high <- cut(allstocks$predict_high_based_on_phigh_minus_actual_high,20)
      allstocks$bin_predict_high_based_on_plow_minus_actual_high <- cut(allstocks$predict_high_based_on_plow_minus_actual_high,20)
      allstocks$bin_predict_low_based_on_pclose_minus_actual_low <- cut(allstocks$predict_low_based_on_pclose_minus_actual_low,20)
      allstocks$bin_predict_low_based_on_popen_minus_actual_low <- cut(allstocks$predict_low_based_on_popen_minus_actual_low,20)
      allstocks$bin_predict_low_based_on_phigh_minus_actual_low <- cut(allstocks$predict_low_based_on_phigh_minus_actual_low,20)
      allstocks$bin_predict_low_based_on_plow_minus_actual_low <- cut(allstocks$predict_low_based_on_plow_minus_actual_low,20)
      allstocks$Month_Yr <- format(as.Date(allstocks$Date), "%Y-%m")
      print(allstocks[rev(order(allstocks$Date)),])
    }
  )
  output$message5 <- renderDataTable(
    { 
      message5()
    }
  )
  message3 <- reactive(
    if (input$plots == "plots") {
      p1 <- qplot(Date, open, data = message5(), geom = "line")
      p2 <- qplot(Date, high, data = message5(), geom = "line")
      p3 <- qplot(Date, low, data = message5(), geom = "line")
      p4 <- qplot(Date, close, data = message5(), geom = "line")
      plot_grid(p1, p2, p3, p4, nrow = 8,ncol =1,rel_heights = c(2/1,2/1,2/1,2/1),rel_widths = c(2/2,2/2,2/2,2/2))
    } else if (input$plots == "NULL") {
      ""
    })
  output$message3 <- renderPlot(
    { 
      message3()
    }
  )
  message7 <- reactive(
    if (input$plots == "plots") {
      p5 <- ggplot(message5(),aes(x=open,y=high,color=day))+geom_point()+geom_smooth(method = "lm",se=FALSE,formula = y ~ x)
      p6 <- qplot(high, low, data = message5(), colour = factor(day))+geom_point()+geom_smooth(method = lm)
      p7 <- qplot(low, close, data = message5(), colour = factor(day))+geom_point()+geom_smooth(method = lm)
      p8 <- qplot(close, open, data = message5(), colour = factor(day))+geom_point()+geom_smooth(method = lm)
      p9 <- qplot(open, popen, data = message5(), colour = factor(day))+geom_point()+geom_smooth(method = lm)
      p10 <- qplot(high, phigh, data = message5(), colour = factor(day))+geom_point()+geom_smooth(method = lm)
      p11 <- qplot(close, pclose, data = message5(), colour = factor(day))+geom_point()+geom_smooth(method = lm)
      p12 <- qplot(low, plow, data = message5(), colour = factor(day))+geom_point()+geom_smooth(method = lm)
      p13 <- qplot(high, plow, data = message5(), colour = factor(day))+geom_point()+geom_smooth(method = lm)
      p14 <- qplot(high, pclose, data = message5(), colour = factor(day))+geom_point()+geom_smooth(method = lm)
      p15 <- qplot(high, popen, data = message5(), colour = factor(day))+geom_point()+geom_smooth(method = lm)
      plot_grid(p5,p6,p7,p8, p9, p10,p11,p12,p13,p14,p15, nrow = 8,ncol =2,rel_heights = c(25/1,25/1,25/1,25/1),rel_widths = c(25/1,25/1,25/1,25/1))
      } else if (input$plots == "NULL") {
      ""
    })
  output$message7 <- renderPlot(
    { 
      message7()
    }
  )
  message8 <- reactive(
    if (input$plots == "plots") {
      p16 <- qplot(message5()$bin_predict_high_based_on_pclose_minus_actual_high, geom = "bar")+ theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("Difference between predict high based on pclose and actual high")
      p17 <- qplot(message5()$bin_predict_high_based_on_popen_minus_actual_high, geom = "bar")+ theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("Difference between predict high based on popen and actual high")
      p18 <- qplot(message5()$bin_predict_high_based_on_phigh_minus_actual_high, geom = "bar")+ theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("Difference between predict high based on phigh and actual high")
      p19 <- qplot(message5()$bin_predict_high_based_on_plow_minus_actual_high, geom = "bar")+ theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("Difference between predict high based on plow and actual high")
      plot_grid(p16,p17,p18,p19,nrow = 4,ncol =1,rel_heights = c(25/1,25/1,25/1,25/1),rel_widths = c(25/1,25/1,25/1,25/1))
    } else if (input$plots == "NULL") {
      ""
    })
  output$message8 <- renderPlot(
    { 
      message8()
    }
  )
    message9 <- reactive(
    if (input$plots == "plots") {
      p20 <- ggplot(message5(),aes(x=factor(Date),fill=factor(ifelse(predict_high_based_on_pclose_minus_actual_high>0,"Positive","Negative"))))+stat_count(geom="bar") + theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("predict high based on pclose")
      p21 <- ggplot(message5(),aes(x=factor(Date),fill=factor(ifelse(predict_high_based_on_popen_minus_actual_high>0,"Positive","Negative"))))+stat_count(geom="bar") + theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("predict high based on popen")
      p22 <- ggplot(message5(),aes(x=factor(Date),fill=factor(ifelse(predict_high_based_on_phigh_minus_actual_high>0,"Positive","Negative"))))+stat_count(geom="bar") + theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("predict high based on phigh")
      p23 <- ggplot(message5(),aes(x=factor(Date),fill=factor(ifelse(predict_high_based_on_plow_minus_actual_high>0,"Positive","Negative"))))+stat_count(geom="bar") + theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("predict high based on plow")
      plot_grid(p20,p21,p22,p23,nrow = 4,ncol =1,rel_heights = c(25/1,25/1,25/1,25/1),rel_widths = c(25/1,25/1,25/1,25/1))
    } else if (input$plots == "NULL") {
      ""
    })
  output$message9 <- renderPlot(
    { 
      message9()
    }
  )
   output$Name <- renderText(
    paste("The company is",as.character((factor(message5()$Company)[1])))
  )
  output$Name1 <- renderText(
    paste("The company is",as.character((factor(message5()$Company)[1])))
  )
    ntext1 <- eventReactive(
    input$goButton8,{
      ds1 <- data.frame(plow=input$Number1)
      print(predict(lm(high~plow, data=message5()),ds1))
    }
  )
  output$ntext1 <- renderPrint(
    {
      ntext1()
    }
  )
  ntext2 <- eventReactive(
     input$goButton9,{
      ds2 <- data.frame(popen=input$Number2)
      print(predict(lm(high~popen, data=message5()),ds2))
    }
  )
  output$ntext2 <- renderPrint(
    {
      ntext2()
    }
  )
  ntext20 <- eventReactive(
    input$goButton20,{
      ds3 <- data.frame(pclose=input$Number3)
      print(predict(lm(high~pclose, data=message5()),ds3))
    }
  )
  output$ntext20 <- renderPrint(
    {
      ntext20()
    }
  )
    ntext4 <- eventReactive(
      input$goButton11,{
        ds4 <- data.frame(phigh=input$Number4)
        print(predict(lm(high~phigh, data=message5()),ds4))
      }
    )
    output$ntext4 <- renderPrint(
      {
        ntext4()
      }
    )
    message300 <- reactive(
      if (input$plots == "plots") {
        p70 <- qplot(message5()$bin_predict_low_based_on_pclose_minus_actual_low, geom = "bar")+ theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("Difference between predict low based on pclose and actual low")
        p71 <- qplot(message5()$bin_predict_low_based_on_popen_minus_actual_low, geom = "bar")+ theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("Difference between predict low based on popen and actual low")
        p72 <- qplot(message5()$bin_predict_low_based_on_phigh_minus_actual_low, geom = "bar")+ theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("Difference between predict low based on phigh and actual low")
        p73 <- qplot(message5()$bin_predict_low_based_on_plow_minus_actual_low, geom = "bar")+ theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("Difference between predict low based on plow and actual low")
        plot_grid(p70,p71,p72,p73,nrow = 4,ncol =1,rel_heights = c(25/1,25/1,25/1,25/1),rel_widths = c(25/1,25/1,25/1,25/1))
      } else if (input$plots == "NULL") {
        ""
      })
    output$message300 <- renderPlot(
      { 
        message300()
      }
    )
    message250 <- reactive(
      if (input$plots == "plots") {
        p265 <- ggplot(message5(),aes(x=factor(Date),fill=factor(ifelse(predict_low_based_on_pclose_minus_actual_low>0,"Positive","Negative"))))+stat_count(geom="bar") + theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("predict low based on pclose")
        p266 <- ggplot(message5(),aes(x=factor(Date),fill=factor(ifelse(predict_low_based_on_popen_minus_actual_low>0,"Positive","Negative"))))+stat_count(geom="bar") + theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("predict low based on popen")
        p267 <- ggplot(message5(),aes(x=factor(Date),fill=factor(ifelse(predict_low_based_on_phigh_minus_actual_low>0,"Positive","Negative"))))+stat_count(geom="bar") + theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("predict low based on phigh")
        p268 <- ggplot(message5(),aes(x=factor(Date),fill=factor(ifelse(predict_low_based_on_plow_minus_actual_low>0,"Positive","Negative"))))+stat_count(geom="bar") + theme(axis.text.x=element_text(angle=45, hjust=1,size = 12)) +geom_text(aes(label=..count..),stat="count",position=position_stack())+ggtitle("predict low based on plow")
        plot_grid(p265,p266,p267,p268,nrow = 4,ncol =1,rel_heights = c(25/1,25/1,25/1,25/1),rel_widths = c(25/1,25/1,25/1,25/1))
      } else if (input$plots == "NULL") {
        ""
      })
    output$message250 <- renderPlot(
      { 
        message250()
      }
    )
    ntext41 <- eventReactive(
      input$goButton41,{
        ds11 <- data.frame(plow=input$Number41)
        print(predict(lm(low~plow, data=message5()),ds11))
      }
    )
    output$ntext41 <- renderPrint(
      {
        ntext41()
      }
    )
    ntext42 <- eventReactive(
      input$goButton42,{
        ds12 <- data.frame(popen=input$Number42)
        print(predict(lm(low~popen, data=message5()),ds12))
      }
    )
    output$ntext42 <- renderPrint(
      {
        ntext42()
      }
    )
    ntext43 <- eventReactive(
      input$goButton43,{
        ds13 <- data.frame(pclose=input$Number43)
        print(predict(lm(low~pclose, data=message5()),ds13))
      }
    )
    output$ntext43 <- renderPrint(
      {
        ntext43()
      }
    )
    ntext44 <- eventReactive(
      input$goButton44,{
        ds14 <- data.frame(phigh=input$Number44)
        print(predict(lm(low~phigh, data=message5()),ds14))
      }
    )
    output$ntext44 <- renderPrint(
      {
        ntext44()
      }
    )
    message100 <- reactive(
      if (input$plots == "plots") {
        h1 <- ggplotly(qplot(Date, high, data = message5(), geom = "line"))
        l1 <- ggplotly(qplot(Date, low, data = message5(), geom = "line"))
        subplot(h1, l1, nrows = 2)
      } else if (input$plots == "NULL") {
        ""
      })
    output$message100 <- renderPlotly(
      { 
        message100()
      }
    )
}

shinyApp(ui, server)
